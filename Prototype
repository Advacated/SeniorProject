import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import matplotlib.pyplot as plt

# Load the Data
data = pd.read_csv('/Users/christianrobertson/Desktop/Senior project CSv/AMZN.csv')
data = data.set_index('Date')

# Using 'Close' price for prediction
closing_prices = data['Close'].values.reshape(-1, 1)

# Scaling data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(closing_prices)

# Create dataset with 60 timesteps and 1 output
X, y = [], []
for i in range(60, len(scaled_data)):
    X.append(scaled_data[i - 60:i, 0])
    y.append(scaled_data[i, 0])
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Split the data (80% training, 20% testing)
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build the LSTM Model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the Model
model.fit(X_train, y_train, epochs=100, batch_size=32)

# Evaluate the Model
loss = model.evaluate(X_test, y_test)
print('Model Loss on Test Data:', loss)

# Predict future prices
n_days = 10
predictions = []
last_known_data = X_test[-1]

for i in range(n_days):
    predicted_price = model.predict(last_known_data.reshape(1, -1, 1))
    predictions.append(predicted_price[0, 0])
    last_known_data = np.append(last_known_data[1:], predicted_price)

# Inverse transform to get the real prices
predicted_prices = scaler.inverse_transform(np.array(predictions).reshape(-1, 1))

# Actual closing prices for visualization
actual_last_days = closing_prices[-n_days:]

# Plotting
dates = pd.to_datetime(data.index[-n_days:])  # Last n_days dates for actual data
future_dates = [dates[-1] + pd.DateOffset(days=i) for i in range(1, n_days+1)]  # Predicted future dates

plt.figure(figsize=(15, 5))
plt.plot(dates, actual_last_days, label='Actual Prices', marker='o')
plt.plot(future_dates, predicted_prices, label='Predicted Prices', marker='x', color='red')
plt.title('Amazon Stock Prices Prediction')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.grid(True)
plt.show()
